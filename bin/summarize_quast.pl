#!/usr/bin/env perl 
#===============================================================================
#
#         FILE:  summarize_quast.pl
#
#        USAGE:  ./summarize_quast.pl  
#
#  DESCRIPTION:  Script to summarize quast output and format into a MojoMojo table.
#
#      OPTIONS:  ---
# REQUIREMENTS:  ---
#         BUGS:  ---
#        NOTES:  ---
#       AUTHOR:  Dr. Scott Givan (sag), givans@missouri.edu
#      COMPANY:  University of Missouri, USA
#      VERSION:  1.0
#      CREATED:  09/18/14 15:42:31
#     REVISION:  ---
#===============================================================================

use 5.010;       # use at least perl version 5.10
use strict;
use warnings;
use autodie;
use Getopt::Long; # use GetOptions function to for CL args

my ($debug,$verbose,$help,$infile);

my $result = GetOptions(
    "infile:s"    =>  \$infile,
    "debug"     =>  \$debug,
    "verbose"   =>  \$verbose,
    "help"      =>  \$help,
);

if ($help) {
    help();
    exit(0);
}

sub help {

    say <<HELP;

    "infile:s"    =>  \$infile,
    "debug"     =>  \$debug,
    "verbose"   =>  \$verbose,
    "help"      =>  \$help,

HELP

}

=cut

A typical quast report file looks like this:

[09/10/14 15:41:02] stahl Ray/$ cat RayOutput--k55-ec/quast/report.tsv
Assembly        Scaffolds broken        Scaffolds
# contigs (>= 1000 bp)  44      38
# Total length (>= 1000 bp)       4606130 4609661
# # contigs       44      38
# Largest contig  425006  425006
# Total length    4606130 4609661
# GC (%)  39.22   39.22
# N50     196242  231890
# N75     126279  126279
# L50     9       8
# L75     16      14
# # N's per 100 kbp       0.00    76.60
# # predicted genes (unique)      3962    3961
# # predicted genes (>= 300 bp)   3693    3693

generated by the following quast command:
quast.py -o quast --threads 4 --gene-finding --gene-thresholds 300 --contig-thresholds 1000 --scaffolds --no-plots Scaffolds.fasta

=cut

my ($kmer,$scaffolds,$largest_scaffold,$n50,$total_length,$gc,$genes) = ('n/a','n/a','n/a','n/a','n/a','n/a','n/a');

if (-e $infile) {
    if ($infile =~ /k(\d+)/i) {
        $kmer = $1;
    } else {
        $kmer = 0;
    }

    open(IN,"<",$infile);

    while (<IN>) {
        my $line = $_;

        # number of scaffolds
        if ($line =~ /# contigs \(>\=.+\).+?\t(\d+)$/) {
            $scaffolds = $1;
        }

        # length of largest scaffold
        if ($line =~ /Largest contig.+\t(\d+)$/) {
            $largest_scaffold = $1;
        }

        # N50
        if ($line =~ /N50.+\t(\d+)$/) {
            $n50 = $1;
        }

        # total length of contigs > min length
        if ($line =~ /Total length \(>\=.+?\t(\d+)$/) {
            $total_length= $1;
        }

        # %GC
        if ($line =~ /GC.+\t([0-9.]+)$/) {
            $gc = $1;
        }

        # Number of predicted genes
        if ($line =~ /predicted genes \(unique\).+?\t(\d+)$/) {
            $genes = $1;
        }

    }
}

close(IN);


say "|$kmer|$scaffolds|$largest_scaffold|$n50|$total_length|$gc|$genes|";

